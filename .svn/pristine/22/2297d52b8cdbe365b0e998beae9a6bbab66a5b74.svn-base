angular.module('order', [])

.config(['$stateProvider', function($stateProvider) {
  $stateProvider
    .state('tab.order', {
      url: '/order',

      views: {
        'tab-order': {
          templateUrl: 'app/order/templates/order.html',
          controller: 'OrderCtrl',
          // resolve: {
          //   data: function($ionicViewSwitcher, $ionicHistory) {
          //     var currentView = $ionicHistory.currentView();
          //     if (currentView && (currentView.stateName == 'tab.recommend' || currentView.stateName == 'tab.seek' || currentView.stateName == 'tab.my')) {
          //       $ionicViewSwitcher.nextTransition("none");
          //     }

          //   }
          // }

        }

      }

    });

}])

.controller('OrderCtrl', function($scope, $http, $ionicScrollDelegate, $timeout, Resource, autoRefresh) {
  var mirrorData = {},
    funData = {},
    lock = false;

  $scope.model = {};
  $scope.type = 1;

  $scope.$on("$ionicView.loaded", function() {
    autoRefresh.start('order-content');

    $timeout(function() {
      if (lock) return;
      if ($scope.type === 1) {
        getMirrorData();
      } else if ($scope.type === 2) {
        getFunData();
      }
    }, 100);
  });

  $scope.doRefresh = function() {

    if ($scope.type === 1) {

      getMirrorData();
    } else if ($scope.type === 2) {
      getFunData();
    }

  };
  // getMirrorData();
  $scope.loadMore = function() {

    loadMoreData();
  };


  $scope.changeData = function(type) {
    $ionicScrollDelegate.$getByHandle('order-content').scrollTop(true);
    $scope.type = type;
    if (type === 1) {
      if (mirrorData.list_data !== undefined) {
        $scope.model = mirrorData;
        return;
      } else {
        autoRefresh.start('order-content');
      }
    } else if (type === 2) {
      if (funData.list_data !== undefined) {
        $scope.model = funData;
        return;
      } else {
        $timeout(function() {
          autoRefresh.start('order-content');
          $timeout(function() {
            if (lock) return;
            if ($scope.type === 1) {
              getMirrorData();
            } else if ($scope.type === 2) {
              getFunData();
            }
          }, 100);
        }, 150);
      }
    }

  };

  function getMirrorData() {
    lock = true;
    Resource.getMirror().then(function(data) {
      mirrorData.list_data = data.list_data;
      mirrorData.nextPage = data.page.next;
      $scope.model = mirrorData;


      $scope.$broadcast('scroll.refreshComplete');
      lock = false;
    }, function(data) {
      $scope.$broadcast('scroll.refreshComplete');
      lock = false;
    });
  }

  function getFunData() {
    lock = true;
    Resource.getFun().then(function(data) {
      funData.list_data = data.list_data;
      funData.nextPage = data.page.next;
      $scope.model = funData;
      $scope.$broadcast('scroll.refreshComplete');
      lock = false;
    }, function(data) {
      $scope.$broadcast('scroll.refreshComplete');
      lock = false;
    });
  }

  function loadMoreData() {
    if (!$scope.model.nextPage) return;
    Resource.get($scope.model.nextPage).then(function(data) {
      if ($scope.type === 1) {
        mirrorData.list_data = mirrorData.list_data.concat(data.list_data);
        mirrorData.nextPage = data.page.next;
        $scope.model = mirrorData;
      } else if ($scope.type === 2) {
        funData.list_data = mirrorData.list_data.concat(data.list_data);
        funData.nextPage = data.page.next;
        $scope.model = funData;
      }
      $scope.$broadcast("scroll.infiniteScrollComplete");
    }, function(data) {
      $scope.$broadcast("scroll.infiniteScrollComplete");
    });
  }

});
